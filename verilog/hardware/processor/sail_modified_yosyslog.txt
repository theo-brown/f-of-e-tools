
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 44520808, clang  -fPIC -Os)


-- Executing script file `../../../yscripts/sail_modified.ys' --

1. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Note: Assuming pure combinatorial block at verilog/alu.v:59.2-128.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at verilog/alu.v:130.2-141.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/dividebytwo.v
Parsing Verilog input from `verilog/dividebytwo.v' to AST representation.
Generating RTLIL representation for module `\dividebytwo'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/pll.v
Parsing Verilog input from `verilog/pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: verilog/sub.v
Parsing Verilog input from `verilog/sub.v' to AST representation.
Generating RTLIL representation for module `\sub'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

22. Executing SYNTH_ICE40 pass.

22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

22.2. Executing HIERARCHY pass (managing design hierarchy).

22.2.1. Finding top of design hierarchy..
root of   4 design levels: top                 
root of   1 design levels: sub                 
root of   0 design levels: regfile             
root of   0 design levels: program_counter     
root of   1 design levels: pll                 
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: mux2to1             
root of   0 design levels: instruction_memory  
root of   0 design levels: imm_gen             
root of   0 design levels: ForwardingUnit      
root of   0 design levels: dividebytwo         
root of   0 design levels: data_mem            
root of   0 design levels: sign_mask_gen       
root of   3 design levels: cpu                 
root of   0 design levels: control             
root of   0 design levels: branch_predictor    
root of   0 design levels: branch_decision     
root of   0 design levels: ALUControl          
root of   2 design levels: alu                 
root of   1 design levels: adder               
root of   0 design levels: csr_file            
Automatically selected top as design top module.

22.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \sub
Used module:             \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     \dividebytwo
Used module:     \pll

22.2.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:             \sub
Used module:             \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     \dividebytwo
Used module:     \pll
Removed 0 unused modules.
Mapping positional arguments of cell top.freq_div (dividebytwo).
Mapping positional arguments of cell top.pll_inst (pll).
Warning: Resizing cell port top.OSCInst0.CLKHFPU from 32 bits to 1 bits.
Warning: Resizing cell port top.OSCInst0.CLKHFEN from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.CI from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.OLOADBOT from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.OLOADTOP from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.ADDSUBBOT from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.ADDSUBTOP from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.OHOLDBOT from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.OHOLDTOP from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.DHOLD from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.CHOLD from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.BHOLD from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.AHOLD from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.ORSTBOT from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.ORSTTOP from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.IRSTBOT from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.IRSTTOP from 32 bits to 1 bits.
Warning: Resizing cell port sub.SB_MAC16_adder.CE from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.CI from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.OLOADBOT from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.OLOADTOP from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.ADDSUBBOT from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.ADDSUBTOP from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.OHOLDBOT from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.OHOLDTOP from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.DHOLD from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.CHOLD from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.BHOLD from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.AHOLD from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.ORSTBOT from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.ORSTTOP from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.IRSTBOT from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.IRSTTOP from 32 bits to 1 bits.
Warning: Resizing cell port adder.SB_MAC16_adder.CE from 32 bits to 1 bits.

22.3. Executing PROC pass (convert processes to netlists).

22.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$344'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$307'.
Cleaned up 0 empty switches.

22.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$597 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$586 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$583 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$580 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$577 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$574 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$559 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$548 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$545 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$542 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$539 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$536 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$verilog/register_file.v:95$321 in module regfile.
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$295 in module imm_gen.
Marked 3 switch rules as full_case in process $proc$verilog/data_mem.v:84$178 in module data_mem.
Marked 1 switch rules as full_case in process $proc$verilog/dataMem_mask_gen.v:58$136 in module sign_mask_gen.
Marked 1 switch rules as full_case in process $proc$verilog/branch_predictor.v:101$59 in module branch_predictor.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$48 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$48 in module ALUControl.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:130$41 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:59$32 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/CSR.v:57$2 in module csr_file.
Removed a total of 5 dead cases.

22.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 87 assignments to connections.

22.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$607'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$603'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$596'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$592'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$585'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$582'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$579'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$576'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$573'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$571'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$569'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$565'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$558'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$554'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$547'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$544'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$541'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$538'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$535'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$533'.
  Set init value: \Q = 1'0
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$318'.
  Set init value: \outAddr = 0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$316'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$314'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$312'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$310'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$296'.
  Set init value: \imm = 0
Found init rule in `\dividebytwo.$proc$verilog/dividebytwo.v:0$260'.
  Set init value: \output_signal = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$256'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:13$255'.
  Set init value: \state = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$74'.
  Set init value: \s = 2'00
  Set init value: \p = 1'0
  Set init value: \cpc = 6'000000
  Set init value: \spc = 33686018
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$49'.
  Set init value: \ALUCtl = 7'0000000

22.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$583'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$577'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$545'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$539'.

22.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$607'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$603'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$597'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$596'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$592'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$586'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$585'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$583'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$582'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$580'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$579'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$577'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$576'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$574'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$573'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$572'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$571'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$570'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$569'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$565'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$559'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$558'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$554'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$548'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$547'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$545'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$544'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$542'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$541'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$539'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$538'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$536'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$535'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$534'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$533'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$532'.
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$321'.
     1/3: $1$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$330
     2/3: $1$memwr$\regfile$verilog/register_file.v:97$320_DATA[31:0]$329
     3/3: $1$memwr$\regfile$verilog/register_file.v:97$320_ADDR[4:0]$328
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$318'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$317'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$316'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$315'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$314'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$313'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$312'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$311'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$310'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$309'.
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem.v:13$299'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$296'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
     1/1: $1\imm[31:0]
Creating decoders for process `\dividebytwo.$proc$verilog/dividebytwo.v:0$260'.
Creating decoders for process `\dividebytwo.$proc$verilog/dividebytwo.v:4$257'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$256'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:13$255'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:84$178'.
     1/50: $2$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$228
     2/50: $2$memwr$\data_block$verilog/data_mem.v:128$138_DATA[31:0]$227
     3/50: $2$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$226
     4/50: $2$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$246
     5/50: $2$memwr$\data_block$verilog/data_mem.v:138$144_DATA[31:0]$245
     6/50: $2$memwr$\data_block$verilog/data_mem.v:138$144_ADDR[31:0]$244
     7/50: $2$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$243
     8/50: $2$memwr$\data_block$verilog/data_mem.v:137$143_DATA[31:0]$242
     9/50: $2$memwr$\data_block$verilog/data_mem.v:137$143_ADDR[31:0]$241
    10/50: $2$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$240
    11/50: $2$memwr$\data_block$verilog/data_mem.v:136$142_DATA[31:0]$239
    12/50: $2$memwr$\data_block$verilog/data_mem.v:136$142_ADDR[31:0]$238
    13/50: $2$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$237
    14/50: $2$memwr$\data_block$verilog/data_mem.v:135$141_DATA[31:0]$236
    15/50: $2$memwr$\data_block$verilog/data_mem.v:135$141_ADDR[31:0]$235
    16/50: $2$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$234
    17/50: $2$memwr$\data_block$verilog/data_mem.v:132$140_DATA[31:0]$233
    18/50: $2$memwr$\data_block$verilog/data_mem.v:132$140_ADDR[31:0]$232
    19/50: $2$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$231
    20/50: $2$memwr$\data_block$verilog/data_mem.v:131$139_DATA[31:0]$230
    21/50: $2$memwr$\data_block$verilog/data_mem.v:131$139_ADDR[31:0]$229
    22/50: $1$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$220
    23/50: $1$memwr$\data_block$verilog/data_mem.v:138$144_DATA[31:0]$219
    24/50: $1$memwr$\data_block$verilog/data_mem.v:138$144_ADDR[31:0]$218
    25/50: $1$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$217
    26/50: $1$memwr$\data_block$verilog/data_mem.v:137$143_DATA[31:0]$216
    27/50: $1$memwr$\data_block$verilog/data_mem.v:137$143_ADDR[31:0]$215
    28/50: $1$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$214
    29/50: $1$memwr$\data_block$verilog/data_mem.v:136$142_DATA[31:0]$213
    30/50: $1$memwr$\data_block$verilog/data_mem.v:136$142_ADDR[31:0]$212
    31/50: $1$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$211
    32/50: $1$memwr$\data_block$verilog/data_mem.v:135$141_DATA[31:0]$210
    33/50: $1$memwr$\data_block$verilog/data_mem.v:135$141_ADDR[31:0]$209
    34/50: $1$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$208
    35/50: $1$memwr$\data_block$verilog/data_mem.v:132$140_DATA[31:0]$207
    36/50: $1$memwr$\data_block$verilog/data_mem.v:132$140_ADDR[31:0]$206
    37/50: $1$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$205
    38/50: $1$memwr$\data_block$verilog/data_mem.v:131$139_DATA[31:0]$204
    39/50: $1$memwr$\data_block$verilog/data_mem.v:131$139_ADDR[31:0]$203
    40/50: $1$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$202
    41/50: $1$memwr$\data_block$verilog/data_mem.v:128$138_DATA[31:0]$201
    42/50: $1$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$200
    43/50: $0\sign_mask_buf[3:0]
    44/50: $0\addr_buf[31:0]
    45/50: $0\write_data_buffer[31:0]
    46/50: $0\word_buf[31:0]
    47/50: $0\state[31:0]
    48/50: $0\clk_stall[0:0]
    49/50: $0\led[0:0]
    50/50: $0\read_data[31:0]
Creating decoders for process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$136'.
     1/1: $1\mask[2:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$74'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
     1/8: $0\spc[31:0] [31:24]
     2/8: $0\spc[31:0] [23:16]
     3/8: $0\spc[31:0] [1:0]
     4/8: $0\spc[31:0] [7:2]
     5/8: $0\spc[31:0] [15:8]
     6/8: $0\cpc[5:0]
     7/8: $0\p[0:0]
     8/8: $0\s[1:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:92$58'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$49'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$48'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:130$41'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:59$32'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\csr_file.$proc$verilog/CSR.v:57$2'.
     1/3: $1$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$8
     2/3: $1$memwr$\csr_file$verilog/CSR.v:59$1_DATA[31:0]$7
     3/3: $1$memwr$\csr_file$verilog/CSR.v:59$1_ADDR[11:0]$6

22.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [0]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [1]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [2]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [3]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [4]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [5]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [6]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [7]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [8]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [9]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [10]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [11]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [12]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [13]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [14]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [15]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [16]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [17]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [18]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [19]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [20]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [21]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [22]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [23]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [24]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [25]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [26]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [27]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [28]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [29]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [30]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [31]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$295`.
No latch inferred for signal `\sign_mask_gen.\mask' from process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$136'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$48'.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [0]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [1]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [2]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [3]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [4]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [5]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [6]` in process `\ALUControl.$proc$verilog/alu_control.v:82$48`.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:130$41'.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:59$32'.

22.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604'.
  created $adff cell `$procdff$1318' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$597'.
  created $dff cell `$procdff$1319' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593'.
  created $adff cell `$procdff$1320' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$586'.
  created $dff cell `$procdff$1321' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$583'.
  created $adff cell `$procdff$1322' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$580'.
  created $dff cell `$procdff$1323' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$577'.
  created $adff cell `$procdff$1324' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$574'.
  created $dff cell `$procdff$1325' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$572'.
  created $dff cell `$procdff$1326' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$570'.
  created $dff cell `$procdff$1327' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566'.
  created $adff cell `$procdff$1328' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$559'.
  created $dff cell `$procdff$1329' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555'.
  created $adff cell `$procdff$1330' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$548'.
  created $dff cell `$procdff$1331' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$545'.
  created $adff cell `$procdff$1332' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$542'.
  created $dff cell `$procdff$1333' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$539'.
  created $adff cell `$procdff$1334' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$536'.
  created $dff cell `$procdff$1335' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$534'.
  created $dff cell `$procdff$1336' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$532'.
  created $dff cell `$procdff$1337' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1338' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1339' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1340' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1341' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1342' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1343' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1344' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$320_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1345' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$320_DATA' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1346' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$320_EN' using process `\regfile.$proc$verilog/register_file.v:95$321'.
  created $dff cell `$procdff$1347' with positive edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$317'.
  created $dff cell `$procdff$1348' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$315'.
  created $dff cell `$procdff$1349' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$313'.
  created $dff cell `$procdff$1350' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$311'.
  created $dff cell `$procdff$1351' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$309'.
  created $dff cell `$procdff$1352' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem.v:13$299'.
  created $dff cell `$procdff$1353' with positive edge clock.
Creating register for signal `\instruction_memory.$mem2bits$\instruction_memory$verilog/instruction_mem.v:15$297' using process `\instruction_memory.$proc$verilog/instruction_mem.v:13$299'.
  created $dff cell `$procdff$1354' with positive edge clock.
Creating register for signal `\instruction_memory.$mem2bits$\instruction_memory$verilog/instruction_mem.v:15$298' using process `\instruction_memory.$proc$verilog/instruction_mem.v:13$299'.
  created $dff cell `$procdff$1355' with positive edge clock.
Creating register for signal `\dividebytwo.\output_signal' using process `\dividebytwo.$proc$verilog/dividebytwo.v:4$257'.
  created $dff cell `$procdff$1356' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1357' with positive edge clock.
Creating register for signal `\data_mem.\led' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1358' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1359' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1360' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1361' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1362' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1363' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1364' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:128$138_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1365' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:128$138_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1366' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:128$138_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1367' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:131$139_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1368' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:131$139_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:131$139_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1370' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:132$140_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1371' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:132$140_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1372' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:132$140_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1373' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:135$141_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1374' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:135$141_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1375' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:135$141_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:136$142_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1377' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:136$142_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1378' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:136$142_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1379' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:137$143_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1380' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:137$143_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1381' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:137$143_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1382' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:138$144_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:138$144_DATA' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:138$144_EN' using process `\data_mem.$proc$verilog/data_mem.v:84$178'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\branch_predictor.\p' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\branch_predictor.\cpc' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\branch_predictor.\spc' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:92$58'.
  created $dff cell `$procdff$1390' with negative edge clock.
Creating register for signal `\csr_file.\rdVal_CSR' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_ADDR' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_DATA' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$1393' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$1_EN' using process `\csr_file.$proc$verilog/CSR.v:57$2'.
  created $dff cell `$procdff$1394' with positive edge clock.

22.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

22.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$607'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$604'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$603'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$597'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$597'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$596'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$593'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$592'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$586'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$586'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$585'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$583'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$582'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$580'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$580'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$579'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$577'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$576'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$574'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$574'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$573'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$572'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$572'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$571'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$570'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$569'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$566'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$565'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$559'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$559'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$558'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$555'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$554'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$548'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$548'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$547'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$545'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$544'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$542'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$542'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$541'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$539'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$538'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$536'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$536'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$535'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$534'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$534'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$533'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$532'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$321'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$321'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$318'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$317'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$316'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$315'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$314'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$313'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$312'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$311'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$310'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$309'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:13$299'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$296'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$295'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$295'.
Removing empty process `dividebytwo.$proc$verilog/dividebytwo.v:0$260'.
Removing empty process `dividebytwo.$proc$verilog/dividebytwo.v:4$257'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$256'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:13$255'.
Found and cleaned up 5 empty switches in `\data_mem.$proc$verilog/data_mem.v:84$178'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:84$178'.
Found and cleaned up 1 empty switch in `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$136'.
Removing empty process `sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$136'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$74'.
Found and cleaned up 2 empty switches in `\branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$59'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:92$58'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$49'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$48'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$48'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:130$41'.
Removing empty process `alu.$proc$verilog/alu.v:130$41'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:59$32'.
Removing empty process `alu.$proc$verilog/alu.v:59$32'.
Found and cleaned up 1 empty switch in `\csr_file.$proc$verilog/CSR.v:57$2'.
Removing empty process `csr_file.$proc$verilog/CSR.v:57$2'.
Cleaned up 41 empty switches.

22.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module sub.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module program_counter.
Optimizing module pll.
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module mux2to1.
Optimizing module instruction_memory.
<suppressed ~2 debug messages>
Optimizing module imm_gen.
Optimizing module ForwardingUnit.
<suppressed ~8 debug messages>
Optimizing module dividebytwo.
<suppressed ~1 debug messages>
Optimizing module data_mem.
<suppressed ~10 debug messages>
Optimizing module sign_mask_gen.
<suppressed ~1 debug messages>
Optimizing module cpu.
Optimizing module control.
Optimizing module branch_predictor.
Optimizing module branch_decision.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module adder.
Optimizing module csr_file.

22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \csr_file..
Removed 41 unused cells and 300 unused wires.
<suppressed ~66 debug messages>

22.6. Executing CHECK pass (checking for obvious problems).
Checking module ALUControl...
Checking module ForwardingUnit...
Checking module adder...
Checking module alu...
Checking module branch_decision...
Checking module branch_predictor...
Checking module control...
Checking module cpu...
Checking module csr_file...
Checking module data_mem...
Checking module dividebytwo...
Checking module ex_mem...
Checking module id_ex...
Checking module if_id...
Checking module imm_gen...
Checking module instruction_memory...
Checking module mem_wb...
Checking module mux2to1...
Checking module pll...
Checking module program_counter...
Checking module regfile...
Checking module sign_mask_gen...
Checking module sub...
Checking module top...
Found and reported 0 problems.

22.7. Executing OPT pass (performing simple optimizations).

22.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~18 debug messages>
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~225 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 146 cells.

22.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1179.
    dead port 2/2 on $mux $procmux$1181.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1234.
    dead port 2/2 on $mux $procmux$1197.
    dead port 2/2 on $mux $procmux$1245.
    dead port 2/2 on $mux $procmux$1259.
    dead port 2/2 on $mux $procmux$1210.
    dead port 2/2 on $mux $procmux$1170.
    dead port 2/2 on $mux $procmux$1275.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$815.
    dead port 2/2 on $mux $procmux$827.
    dead port 2/2 on $mux $procmux$839.
    dead port 2/2 on $mux $procmux$845.
    dead port 2/2 on $mux $procmux$851.
    dead port 2/2 on $mux $procmux$857.
    dead port 2/2 on $mux $procmux$864.
    dead port 2/2 on $mux $procmux$871.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$894.
    dead port 2/2 on $mux $procmux$902.
    dead port 2/2 on $mux $procmux$911.
    dead port 2/2 on $mux $procmux$920.
    dead port 2/2 on $mux $procmux$929.
    dead port 2/2 on $mux $procmux$939.
    dead port 2/2 on $mux $procmux$949.
    dead port 2/2 on $mux $procmux$959.
    dead port 2/2 on $mux $procmux$970.
    dead port 2/2 on $mux $procmux$981.
    dead port 2/2 on $mux $procmux$992.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 33 multiplexer ports.
<suppressed ~57 debug messages>

22.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$1201: { $procmux$1196_CMP $procmux$1208_CMP $auto$opt_reduce.cc:134:opt_mux$1405 $procmux$1205_CMP $procmux$1180_CMP $procmux$1203_CMP $procmux$1202_CMP }
    New ctrl vector for $pmux cell $procmux$1253: $auto$opt_reduce.cc:134:opt_mux$1407
    New ctrl vector for $pmux cell $procmux$1278: { $auto$opt_reduce.cc:134:opt_mux$1409 $procmux$1276_CMP $procmux$1260_CMP $procmux$1246_CMP $procmux$1221_CMP $procmux$1182_CMP $procmux$1171_CMP }
    New ctrl vector for $pmux cell $procmux$1241: $auto$opt_reduce.cc:134:opt_mux$1411
    New ctrl vector for $pmux cell $procmux$1225: { $procmux$1196_CMP $auto$opt_reduce.cc:134:opt_mux$1413 $procmux$1205_CMP $procmux$1203_CMP $procmux$1202_CMP $procmux$1208_CMP $procmux$1180_CMP }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$1296: { $procmux$1308_CMP $procmux$1306_CMP $procmux$1305_CMP $procmux$1304_CMP $procmux$1303_CMP $procmux$1302_CMP $procmux$1301_CMP $procmux$1300_CMP $procmux$1299_CMP $auto$opt_reduce.cc:134:opt_mux$1415 $procmux$1297_CMP }
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
    Consolidated identical input bits for $mux cell $procmux$1310:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5
      New ports: A=1'0, B=1'1, Y=$0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0]
      New connections: $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [31:1] = { $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] $0$memwr$\csr_file$verilog/CSR.v:59$1_EN[31:0]$5 [0] }
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$813:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$813_Y
      New ports: A=1'0, B=1'1, Y=$procmux$813_Y [0]
      New connections: $procmux$813_Y [31:1] = { $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] $procmux$813_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$843:
      Old ports: A=0, B=32'11111111000000000000000000000000, Y=$procmux$843_Y
      New ports: A=1'0, B=1'1, Y=$procmux$843_Y [24]
      New connections: { $procmux$843_Y [31:25] $procmux$843_Y [23:0] } = { $procmux$843_Y [24] $procmux$843_Y [24] $procmux$843_Y [24] $procmux$843_Y [24] $procmux$843_Y [24] $procmux$843_Y [24] $procmux$843_Y [24] 24'000000000000000000000000 }
    Consolidated identical input bits for $mux cell $procmux$862:
      Old ports: A=0, B=16711680, Y=$procmux$862_Y
      New ports: A=1'0, B=1'1, Y=$procmux$862_Y [16]
      New connections: { $procmux$862_Y [31:17] $procmux$862_Y [15:0] } = { 8'00000000 $procmux$862_Y [16] $procmux$862_Y [16] $procmux$862_Y [16] $procmux$862_Y [16] $procmux$862_Y [16] $procmux$862_Y [16] $procmux$862_Y [16] 16'0000000000000000 }
    Consolidated identical input bits for $mux cell $procmux$884:
      Old ports: A=0, B=65280, Y=$procmux$884_Y
      New ports: A=1'0, B=1'1, Y=$procmux$884_Y [8]
      New connections: { $procmux$884_Y [31:9] $procmux$884_Y [7:0] } = { 16'0000000000000000 $procmux$884_Y [8] $procmux$884_Y [8] $procmux$884_Y [8] $procmux$884_Y [8] $procmux$884_Y [8] $procmux$884_Y [8] $procmux$884_Y [8] 8'00000000 }
    New ctrl vector for $pmux cell $procmux$1081: { $procmux$1062_CMP $procmux$1079_CMP $auto$opt_reduce.cc:134:opt_mux$1417 }
    Consolidated identical input bits for $mux cell $procmux$909:
      Old ports: A=0, B=255, Y=$procmux$909_Y
      New ports: A=1'0, B=1'1, Y=$procmux$909_Y [0]
      New connections: $procmux$909_Y [31:1] = { 24'000000000000000000000000 $procmux$909_Y [0] $procmux$909_Y [0] $procmux$909_Y [0] $procmux$909_Y [0] $procmux$909_Y [0] $procmux$909_Y [0] $procmux$909_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$937:
      Old ports: A=0, B=65535, Y=$procmux$937_Y
      New ports: A=1'0, B=1'1, Y=$procmux$937_Y [0]
      New connections: $procmux$937_Y [31:1] = { 16'0000000000000000 $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] $procmux$937_Y [0] }
    New ctrl vector for $pmux cell $procmux$1092: { $procmux$1062_CMP $auto$opt_reduce.cc:134:opt_mux$1419 }
    Consolidated identical input bits for $mux cell $procmux$968:
      Old ports: A=0, B=32'11111111111111110000000000000000, Y=$procmux$968_Y
      New ports: A=1'0, B=1'1, Y=$procmux$968_Y [16]
      New connections: { $procmux$968_Y [31:17] $procmux$968_Y [15:0] } = { $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] $procmux$968_Y [16] 16'0000000000000000 }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$1004:
      Old ports: A=0, B=$procmux$862_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196
      New ports: A=1'0, B=$procmux$862_Y [16], Y=$0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16]
      New connections: { $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [31:17] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [15:0] } = { 8'00000000 $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] $0$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$196 [16] 16'0000000000000000 }
    Consolidated identical input bits for $mux cell $procmux$1013:
      Old ports: A=0, B=$procmux$884_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193
      New ports: A=1'0, B=$procmux$884_Y [8], Y=$0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8]
      New connections: { $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [31:9] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [7:0] } = { 16'0000000000000000 $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] $0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193 [8] 8'00000000 }
    Consolidated identical input bits for $mux cell $procmux$1022:
      Old ports: A=0, B=$procmux$909_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190
      New ports: A=1'0, B=$procmux$909_Y [0], Y=$0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [31:1] = { 24'000000000000000000000000 $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] $0$memwr$\data_block$verilog/data_mem.v:135$141_EN[31:0]$190 [0] }
    Consolidated identical input bits for $mux cell $procmux$1031:
      Old ports: A=0, B=$procmux$937_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187
      New ports: A=1'0, B=$procmux$937_Y [0], Y=$0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [31:1] = { 16'0000000000000000 $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] $0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187 [0] }
    Consolidated identical input bits for $mux cell $procmux$1040:
      Old ports: A=0, B=$procmux$968_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184
      New ports: A=1'0, B=$procmux$968_Y [16], Y=$0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16]
      New connections: { $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [31:17] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [15:0] } = { $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] $0$memwr$\data_block$verilog/data_mem.v:131$139_EN[31:0]$184 [16] 16'0000000000000000 }
    Consolidated identical input bits for $mux cell $procmux$995:
      Old ports: A=0, B=$procmux$843_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199
      New ports: A=1'0, B=$procmux$843_Y [24], Y=$0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24]
      New connections: { $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [31:25] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [23:0] } = { $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] $0$memwr$\data_block$verilog/data_mem.v:138$144_EN[31:0]$199 [24] 24'000000000000000000000000 }
    Consolidated identical input bits for $mux cell $procmux$1049:
      Old ports: A=0, B=$procmux$813_Y, Y=$0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181
      New ports: A=1'0, B=$procmux$813_Y [0], Y=$0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [31:1] = { $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] $0$memwr$\data_block$verilog/data_mem.v:128$138_EN[31:0]$181 [0] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$798: { $procmux$804_CMP $procmux$803_CMP $auto$opt_reduce.cc:134:opt_mux$1421 $procmux$800_CMP $procmux$799_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$789:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0]
      New connections: $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [31:1] = { $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] $0$memwr$\regfile$verilog/register_file.v:97$320_EN[31:0]$324 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 25 changes.

22.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

22.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 6 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 7 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 8 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 9 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 10 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 11 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 12 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 13 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 14 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 15 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 16 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 17 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 18 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 19 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 20 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 21 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 22 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 23 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 24 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 25 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 26 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 27 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 28 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 29 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 30 on $procdff$1342 ($dff) from module regfile.
Setting constant 0-bit at position 31 on $procdff$1342 ($dff) from module regfile.

22.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 182 unused wires.
<suppressed ~9 debug messages>

22.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.7.9. Rerunning OPT passes. (Maybe there is more to do..)

22.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

22.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.7.13. Executing OPT_DFF pass (perform DFF optimizations).

22.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.7.16. Finished OPT passes. (There is nothing left to do.)

22.8. Executing FSM pass (extract and optimize FSM).

22.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking data_mem.state as FSM state register:
    Register has an initialization value.

22.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

22.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

22.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

22.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

22.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

22.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

22.9. Executing OPT pass (performing simple optimizations).

22.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~58 debug messages>

22.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1389 ($dff) from module branch_predictor (D = { \spc [7:0] \cpc $procmux$1135_Y }, Q = \spc [15:0]).
Adding EN signal on $procdff$1389 ($dff) from module branch_predictor (D = \spc [23:16], Q = \spc [31:24]).
Adding EN signal on $procdff$1389 ($dff) from module branch_predictor (D = \spc [15:8], Q = \spc [23:16]).
Adding EN signal on $procdff$1388 ($dff) from module branch_predictor (D = \in_addr [7:2], Q = \cpc).
Adding EN signal on $procdff$1387 ($dff) from module branch_predictor (D = \spc [0], Q = \p).
Adding EN signal on $procdff$1386 ($dff) from module branch_predictor (D = $procmux$1160_Y, Q = \s).
Adding EN signal on $procdff$1364 ($dff) from module data_mem (D = \sign_mask, Q = \sign_mask_buf).
Adding EN signal on $procdff$1363 ($dff) from module data_mem (D = \addr, Q = \addr_buf).
Adding EN signal on $procdff$1362 ($dff) from module data_mem (D = \write_data, Q = \write_data_buffer).
Adding EN signal on $procdff$1361 ($dff) from module data_mem (D = $memrd$\data_block$verilog/data_mem.v:107$223_DATA, Q = \word_buf).
Adding EN signal on $procdff$1360 ($dff) from module data_mem (D = $0\state[31:0], Q = \state).
Adding EN signal on $procdff$1359 ($dff) from module data_mem (D = $0\clk_stall[0:0], Q = \clk_stall).
Adding EN signal on $procdff$1358 ($dff) from module data_mem (D = \write_data_buffer [0], Q = \led).
Adding EN signal on $procdff$1357 ($dff) from module data_mem (D = \read_buf, Q = \read_data).

22.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 18 unused cells and 14 unused wires.
<suppressed ~20 debug messages>

22.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~1 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~2 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.9.9. Rerunning OPT passes. (Maybe there is more to do..)

22.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

22.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
<suppressed ~3 debug messages>
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

22.9.13. Executing OPT_DFF pass (perform DFF optimizations).

22.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

22.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.9.16. Rerunning OPT passes. (Maybe there is more to do..)

22.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

22.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.9.20. Executing OPT_DFF pass (perform DFF optimizations).

22.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.9.23. Finished OPT passes. (There is nothing left to do.)

22.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$1166 ($pmux).
Removed top 1 bits (of 2) from port B of cell ALUControl.$procmux$1169_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$1182_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$1192 ($pmux).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$1206_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$1207_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$1208_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$1215 ($pmux).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$1221_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$1225 ($pmux).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$1241 ($mux).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$1246_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$1253 ($mux).
Removed top 5 bits (of 7) from port B of cell ALUControl.$procmux$1260_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$1285_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$1286_CMP0 ($eq).
Removed top 4 bits (of 7) from wire ALUControl.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$4\ALUCtl[6:0].
Removed top 31 bits (of 32) from port Y of cell alu.$and$verilog/alu.v:57$27 ($and).
Removed top 31 bits (of 32) from port A of cell alu.$not$verilog/alu.v:57$29 ($not).
Removed top 31 bits (of 32) from port A of cell alu.$or$verilog/alu.v:57$31 ($or).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$1292_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$1293_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$1294_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1301_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1302_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1303_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1304_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1305_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1306_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1307_CMP0 ($eq).
Removed top 31 bits (of 32) from wire alu.$and$verilog/alu.v:57$27_Y.
Removed cell branch_predictor.$procmux$1156 ($mux).
Removed top 2 address bits (of 12) from memory write port csr_file.$auto$proc_memwr.cc:37:proc_memwr$1403 (csr_file).
Removed top 2 address bits (of 12) from memory read port csr_file.$memrd$\csr_file$verilog/CSR.v:61$9 (csr_file).
Removed cell csr_file.$procmux$1313 ($mux).
Removed cell csr_file.$procmux$1316 ($mux).
Removed top 2 bits (of 12) from wire csr_file.$0$memwr$\csr_file$verilog/CSR.v:59$1_ADDR[11:0]$3.
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1396 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1397 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1398 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1399 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1400 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1401 (data_block).
Removed top 22 address bits (of 32) from memory write port data_mem.$auto$proc_memwr.cc:37:proc_memwr$1402 (data_block).
Removed top 22 address bits (of 32) from memory init port data_mem.$meminit$\data_block$verilog/data_mem.v:0$254 (data_block).
Removed top 22 address bits (of 32) from memory read port data_mem.$memrd$\data_block$verilog/data_mem.v:107$223 (data_block).
Removed top 19 bits (of 32) from port B of cell data_mem.$sub$verilog/data_mem.v:107$224 ($sub).
Removed top 18 bits (of 32) from port Y of cell data_mem.$sub$verilog/data_mem.v:107$224 ($sub).
Removed top 18 bits (of 32) from port B of cell data_mem.$eq$verilog/data_mem.v:120$225 ($eq).
Removed cell data_mem.$procmux$825 ($mux).
Removed cell data_mem.$procmux$837 ($mux).
Removed top 2 bits (of 4) from port B of cell data_mem.$procmux$844_CMP0 ($eq).
Removed cell data_mem.$procmux$849 ($mux).
Removed cell data_mem.$procmux$855 ($mux).
Removed top 2 bits (of 4) from port B of cell data_mem.$procmux$863_CMP0 ($eq).
Removed cell data_mem.$procmux$869 ($mux).
Removed cell data_mem.$procmux$876 ($mux).
Removed top 3 bits (of 4) from port B of cell data_mem.$procmux$885_CMP0 ($eq).
Removed cell data_mem.$procmux$892 ($mux).
Removed cell data_mem.$procmux$900 ($mux).
Removed cell data_mem.$procmux$918 ($mux).
Removed cell data_mem.$procmux$927 ($mux).
Removed top 1 bits (of 4) from port B of cell data_mem.$procmux$938_CMP0 ($eq).
Removed cell data_mem.$procmux$947 ($mux).
Removed cell data_mem.$procmux$957 ($mux).
Removed top 1 bits (of 4) from port B of cell data_mem.$procmux$969_CMP0 ($eq).
Removed cell data_mem.$procmux$979 ($mux).
Removed cell data_mem.$procmux$990 ($mux).
Removed cell data_mem.$procmux$998 ($mux).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$1002_CMP0 ($eq).
Removed cell data_mem.$procmux$1001 ($mux).
Removed cell data_mem.$procmux$1007 ($mux).
Removed cell data_mem.$procmux$1010 ($mux).
Removed cell data_mem.$procmux$1016 ($mux).
Removed cell data_mem.$procmux$1019 ($mux).
Removed cell data_mem.$procmux$1025 ($mux).
Removed cell data_mem.$procmux$1028 ($mux).
Removed cell data_mem.$procmux$1034 ($mux).
Removed cell data_mem.$procmux$1037 ($mux).
Removed cell data_mem.$procmux$1043 ($mux).
Removed cell data_mem.$procmux$1046 ($mux).
Removed cell data_mem.$procmux$1052 ($mux).
Removed cell data_mem.$procmux$1055 ($mux).
Removed top 31 bits (of 32) from port B of cell data_mem.$procmux$1079_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$1083_CMP0 ($eq).
Removed cell data_mem.$procmux$1085 ($mux).
Removed top 30 bits (of 32) from mux cell data_mem.$procmux$1088 ($mux).
Removed cell data_mem.$procmux$1095 ($mux).
Removed cell data_mem.$procmux$1098 ($mux).
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:131$139_ADDR[31:0]$182.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:132$140_ADDR[31:0]$185.
Removed top 16 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:132$140_DATA[31:0]$186.
Removed top 16 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$187.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:135$141_ADDR[31:0]$188.
Removed top 24 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:135$141_DATA[31:0]$189.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:136$142_ADDR[31:0]$191.
Removed top 16 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:136$142_DATA[31:0]$192.
Removed top 16 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:136$142_EN[31:0]$193.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:137$143_ADDR[31:0]$194.
Removed top 8 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:137$143_DATA[31:0]$195.
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:138$144_ADDR[31:0]$197.
Removed top 16 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:132$140_DATA[31:0]$233.
Removed top 16 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:132$140_EN[31:0]$234.
Removed top 24 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:135$141_DATA[31:0]$236.
Removed top 16 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:136$142_DATA[31:0]$239.
Removed top 8 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:137$143_DATA[31:0]$242.
Removed top 8 bits (of 32) from wire data_mem.$2$memwr$\data_block$verilog/data_mem.v:137$143_EN[31:0]$243.
Removed top 30 bits (of 32) from wire data_mem.$procmux$1088_Y.
Removed top 1 bits (of 32) from mux cell imm_gen.$procmux$798 ($pmux).
Removed top 3 bits (of 4) from port B of cell imm_gen.$procmux$801_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$802_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$803_CMP0 ($eq).
Removed top 21 address bits (of 32) from memory init port instruction_memory.$meminit$\instruction_memory$verilog/instruction_mem.v:0$306 (instruction_memory).
Removed top 21 address bits (of 32) from memory read port instruction_memory.$memrd$\instruction_memory$verilog/instruction_mem.v:15$302 (instruction_memory).
Removed top 27 address bits (of 32) from memory init port regfile.$meminit$\regfile$verilog/register_file.v:92$343 (regfile).
Removed cell regfile.$procmux$792 ($mux).
Removed cell regfile.$procmux$795 ($mux).
Removed top 27 bits (of 32) from wire regfile.wrAddr_buf.
Removed top 1 bits (of 2) from port B of cell sign_mask_gen.$procmux$1113_CMP0 ($eq).

22.11. Executing PEEPOPT pass (run peephole optimizers).

22.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 61 unused wires.
<suppressed ~6 debug messages>

22.13. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$verilog/alu.v:95$36 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$1302_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$verilog/alu.v:90$35 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$1303_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$verilog/alu.v:100$37 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$1301_CMP.
    No candidates found.

22.14. Executing TECHMAP pass (map to technology primitives).

22.14.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

22.14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~62 debug messages>

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module adder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $alu model for $ge$verilog/alu.v:137$47 ($ge): new $alu
  creating $alu model for $lt$verilog/alu.v:136$46 ($lt): merged with $ge$verilog/alu.v:137$47.
  creating $alu cell for $ge$verilog/alu.v:137$47, $lt$verilog/alu.v:136$46: $auto$alumacc.cc:485:replace_alu$1492
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_decision:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_predictor:
  creating $macc model for $add$verilog/branch_predictor.v:135$72 ($add).
  creating $alu model for $macc $add$verilog/branch_predictor.v:135$72.
  creating $alu cell for $add$verilog/branch_predictor.v:135$72: $auto$alumacc.cc:485:replace_alu$1505
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module csr_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mem:
  creating $macc model for $sub$verilog/data_mem.v:107$224 ($sub).
  creating $alu model for $macc $sub$verilog/data_mem.v:107$224.
  creating $alu cell for $sub$verilog/data_mem.v:107$224: $auto$alumacc.cc:485:replace_alu$1508
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dividebytwo:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ex_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module id_ex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module if_id:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_memory:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mem_wb:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pll:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sign_mask_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sub:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

22.18. Executing OPT pass (performing simple optimizations).

22.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

22.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.18.6. Executing OPT_DFF pass (perform DFF optimizations).

22.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

22.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.18.9. Rerunning OPT passes. (Maybe there is more to do..)

22.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

22.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.18.13. Executing OPT_DFF pass (perform DFF optimizations).

22.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.18.16. Finished OPT passes. (There is nothing left to do.)

22.19. Executing MEMORY pass.

22.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

22.19.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking cell `$memrd$\csr_file$verilog/CSR.v:61$9' in module `\csr_file': merged data $dff to cell.
Checking cell `$memrd$\data_block$verilog/data_mem.v:107$223' in module `\data_mem': merged data $dff to cell.
Checking cell `$memrd$\instruction_memory$verilog/instruction_mem.v:15$302' in module `\instruction_memory': merged data $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:104$331' in module `\regfile': merged data $dff to cell.
Checking cell `$memrd$\regfile$verilog/register_file.v:105$332' in module `\regfile': merged data $dff to cell.

22.19.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 10 unused wires.
<suppressed ~9 debug messages>

22.19.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory data_mem.data_block by address:
  New clock domain: posedge \clk
    Port 0 ($auto$proc_memwr.cc:37:proc_memwr$1396) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 11111111111111111111111111111111
    Port 1 ($auto$proc_memwr.cc:37:proc_memwr$1397) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 11111111111111110000000000000000
      Merging port 0 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111
    Port 2 ($auto$proc_memwr.cc:37:proc_memwr$1398) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 00000000000000001111111111111111
      Merging port 1 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111
    Port 3 ($auto$proc_memwr.cc:37:proc_memwr$1399) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 00000000000000000000000011111111
      Merging port 2 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111
    Port 4 ($auto$proc_memwr.cc:37:proc_memwr$1400) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 00000000000000001111111100000000
      Merging port 3 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111
    Port 5 ($auto$proc_memwr.cc:37:proc_memwr$1401) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 00000000111111110000000000000000
      Merging port 4 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111
    Port 6 ($auto$proc_memwr.cc:37:proc_memwr$1402) has addr $0$memwr$\data_block$verilog/data_mem.v:128$138_ADDR[31:0]$179.
      Active bits: 11111111000000000000000000000000
      Merging port 5 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11111111111111111111111111111111

22.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.19.6. Executing MEMORY_COLLECT pass (generating $mem cells).

22.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing csr_file.csr_file:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: csr_file.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: csr_file.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: csr_file.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: csr_file.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: csr_file.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: csr_file.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: csr_file.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: csr_file.7.0.0
Processing data_mem.data_block:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_block.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: data_block.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: data_block.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: data_block.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: data_block.7.0.0
Processing instruction_memory.instruction_memory:
  Properties: ports=1 bits=40960 rports=1 wports=0 dbits=32 abits=11 words=1280
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=83
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=83
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=62
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3072 efficiency=62
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=1536 waste=1536 efficiency=62
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=1536 efficiency=62
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=83
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=62
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=1536 waste=1536 efficiency=62
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=83
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=62
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=1536 waste=1536 efficiency=62
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=62, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=62, cells=16, acells=2
    Efficiency for rule 4.1: efficiency=83, cells=12, acells=3
    Efficiency for rule 1.1: efficiency=100, cells=10, acells=5
    Selected rule 1.1 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 1 0>: instruction_memory.0.1.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 2 0>: instruction_memory.0.2.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 3 0>: instruction_memory.0.3.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 4 0>: instruction_memory.0.4.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: instruction_memory.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 1 0>: instruction_memory.1.1.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 2 0>: instruction_memory.1.2.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 3 0>: instruction_memory.1.3.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 4 0>: instruction_memory.1.4.0
Processing regfile.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1

22.22. Executing TECHMAP pass (map to technology primitives).

22.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

22.22.2. Continuing TECHMAP pass.
Using template $paramod$22588fa4a5440417df007a2217f322c053bc2366\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$0693594c68317ed206be414ef17dbefae4949356\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$8992559a1af612e18611860186fdcde8df5609a0\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$35e33f8720ce502886247a84892a68191b34332d\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$5ec2317417b5aaa214b523a7891f319d08621d53\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$e0cdd2d2fe3e32ec1eb632283d67c29eedeb2090\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$9b2a6abc158518a48f7020ac9e7a77443fac3b58\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$9a60c1a9215153db7fafbb96b2fcd1805d8e862b\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$74e86a1473a276d7f5e0aabab902bd3b9ea7e933\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$243904235600f3c2c91c312dbfcf68b70fbdd0a0\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$e423636eeb1c5b84e01d6dde9ba77dec700ad238\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$462a01b053526f7ff7ebc455be5d4c002444a680\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ee410fe0d88ecb75ec9a11c7c9d75ee07554974d\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$8550026cf4a61438633968add8a5eeb1a9db35c2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$4a6b555814a1d338ea53d43d91e91d8e20091d35\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$38813dee0375b25bc663ea308a0c1b49946fc941\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$653080360916d812187ef2ecc76e41663cbf4686\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$b4d8ce0db96a95554838715a90ce0aa2e1dbed4a\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~647 debug messages>

22.23. Executing ICE40_BRAMINIT pass.

22.24. Executing OPT pass (performing simple optimizations).

22.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~4 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~19 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
<suppressed ~68 debug messages>
Optimizing module data_mem.
<suppressed ~349 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~84 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
<suppressed ~18 debug messages>
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~12 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
<suppressed ~30 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 17 cells.

22.24.3. Executing OPT_DFF pass (perform DFF optimizations).

22.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 14 unused cells and 879 unused wires.
<suppressed ~27 debug messages>

22.24.5. Finished fast OPT passes.

22.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

22.26. Executing OPT pass (performing simple optimizations).

22.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

22.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$1192:
      Old ports: A=3'010, B=3'110, Y=$8\ALUCtl[6:0] [2:0]
      New ports: A=1'0, B=1'1, Y=$8\ALUCtl[6:0] [2]
      New connections: $8\ALUCtl[6:0] [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $procmux$1201:
      Old ports: A={ 4'0000 $8\ALUCtl[6:0] [2:0] }, B={ 25'0000101000011100010000000 $6\ALUCtl[6:0] [2:0] 14'00000010000000 }, Y=$7\ALUCtl[6:0]
      New ports: A={ 1'0 $8\ALUCtl[6:0] [2:0] }, B={ 13'0101011110000 $6\ALUCtl[6:0] [2:0] 8'00010000 }, Y=$7\ALUCtl[6:0] [3:0]
      New connections: $7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $procmux$1215:
      Old ports: A=3'011, B=3'100, Y=$6\ALUCtl[6:0] [2:0]
      New ports: A=2'01, B=2'10, Y={ $6\ALUCtl[6:0] [2] $6\ALUCtl[6:0] [0] }
      New connections: $6\ALUCtl[6:0] [1] = $6\ALUCtl[6:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1241:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUCtl[6:0] [0]
      New connections: $4\ALUCtl[6:0] [3:1] = { $4\ALUCtl[6:0] [0] $4\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$1253:
      Old ports: A=4'1111, B=4'0010, Y=$3\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$3\ALUCtl[6:0] [0]
      New connections: $3\ALUCtl[6:0] [3:1] = { $3\ALUCtl[6:0] [0] $3\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $procmux$1268:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $2\ALUCtl[6:0] [6:4] $2\ALUCtl[6:0] [0] }
      New connections: $2\ALUCtl[6:0] [3:1] = { $2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $pmux cell $procmux$1081:
      Old ports: A={ 30'000000000000000000000000000000 $auto$wreduce.cc:454:run$1488 [1:0] }, B=64'0000000000000000000000000000001000000000000000000000000000000000, Y=$0\state[31:0]
      New ports: A=$auto$wreduce.cc:454:run$1488 [1:0], B=4'1000, Y=$0\state[31:0] [1:0]
      New connections: $0\state[31:0] [31:2] = 30'000000000000000000000000000000
    Consolidated identical input bits for $mux cell $procmux$1088:
      Old ports: A=2'11, B=2'01, Y=$auto$wreduce.cc:454:run$1488 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:454:run$1488 [1]
      New connections: $auto$wreduce.cc:454:run$1488 [0] = 1'1
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:60$165:
      Old ports: A={ 24'000000000000000000000000 \word_buf [15:8] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:8] }, Y=$ternary$verilog/data_mem.v:60$165_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:60$165_Y [8]
      New connections: { $ternary$verilog/data_mem.v:60$165_Y [31:9] $ternary$verilog/data_mem.v:60$165_Y [7:0] } = { $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] $ternary$verilog/data_mem.v:60$165_Y [8] \word_buf [15:8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:60$166:
      Old ports: A={ 24'000000000000000000000000 \word_buf [7:0] }, B={ \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7:0] }, Y=$ternary$verilog/data_mem.v:60$166_Y
      New ports: A=1'0, B=\word_buf [7], Y=$ternary$verilog/data_mem.v:60$166_Y [8]
      New connections: { $ternary$verilog/data_mem.v:60$166_Y [31:9] $ternary$verilog/data_mem.v:60$166_Y [7:0] } = { $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] $ternary$verilog/data_mem.v:60$166_Y [8] \word_buf [7:0] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:62$168:
      Old ports: A={ 24'000000000000000000000000 \word_buf [31:24] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:24] }, Y=$ternary$verilog/data_mem.v:62$168_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:62$168_Y [8]
      New connections: { $ternary$verilog/data_mem.v:62$168_Y [31:9] $ternary$verilog/data_mem.v:62$168_Y [7:0] } = { $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] $ternary$verilog/data_mem.v:62$168_Y [8] \word_buf [31:24] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:62$169:
      Old ports: A={ 24'000000000000000000000000 \word_buf [23:16] }, B={ \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23:16] }, Y=$ternary$verilog/data_mem.v:62$169_Y
      New ports: A=1'0, B=\word_buf [23], Y=$ternary$verilog/data_mem.v:62$169_Y [8]
      New connections: { $ternary$verilog/data_mem.v:62$169_Y [31:9] $ternary$verilog/data_mem.v:62$169_Y [7:0] } = { $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] $ternary$verilog/data_mem.v:62$169_Y [8] \word_buf [23:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:66$171:
      Old ports: A={ 16'0000000000000000 \word_buf [31:16] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:16] }, Y=$ternary$verilog/data_mem.v:66$171_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:66$171_Y [16]
      New connections: { $ternary$verilog/data_mem.v:66$171_Y [31:17] $ternary$verilog/data_mem.v:66$171_Y [15:0] } = { $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] $ternary$verilog/data_mem.v:66$171_Y [16] \word_buf [31:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:66$172:
      Old ports: A={ 16'0000000000000000 \word_buf [15:0] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:0] }, Y=$ternary$verilog/data_mem.v:66$172_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:66$172_Y [16]
      New connections: { $ternary$verilog/data_mem.v:66$172_Y [31:17] $ternary$verilog/data_mem.v:66$172_Y [15:0] } = { $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] $ternary$verilog/data_mem.v:66$172_Y [16] \word_buf [15:0] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:60$167:
      Old ports: A=$ternary$verilog/data_mem.v:60$166_Y, B=$ternary$verilog/data_mem.v:60$165_Y, Y=\out1
      New ports: A={ $ternary$verilog/data_mem.v:60$166_Y [8] \word_buf [7:0] }, B={ $ternary$verilog/data_mem.v:60$165_Y [8] \word_buf [15:8] }, Y=\out1 [8:0]
      New connections: \out1 [31:9] = { \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:62$170:
      Old ports: A=$ternary$verilog/data_mem.v:62$169_Y, B=$ternary$verilog/data_mem.v:62$168_Y, Y=\out2
      New ports: A={ $ternary$verilog/data_mem.v:62$169_Y [8] \word_buf [23:16] }, B={ $ternary$verilog/data_mem.v:62$168_Y [8] \word_buf [31:24] }, Y=\out2 [8:0]
      New connections: \out2 [31:9] = { \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:66$173:
      Old ports: A=$ternary$verilog/data_mem.v:66$172_Y, B=$ternary$verilog/data_mem.v:66$171_Y, Y=\out3
      New ports: A={ $ternary$verilog/data_mem.v:66$172_Y [16] \word_buf [15:0] }, B={ $ternary$verilog/data_mem.v:66$171_Y [16] \word_buf [31:16] }, Y=\out3 [16:0]
      New connections: \out3 [31:17] = { \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:71$175:
      Old ports: A=\out1, B=\out2, Y=\out5
      New ports: A=\out1 [8:0], B=\out2 [8:0], Y=\out5 [8:0]
      New connections: \out5 [31:9] = { \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 18 changes.

22.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~6 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

22.26.6. Executing OPT_DFF pass (perform DFF optimizations).

22.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

22.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.26.9. Rerunning OPT passes. (Maybe there is more to do..)

22.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

22.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.26.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 11 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 15 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 16 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 17 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 18 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 19 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 20 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 21 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 22 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 23 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 24 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 25 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 26 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 27 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 28 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 29 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 30 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.
Setting constant 0-bit at position 31 on $auto$opt_dff.cc:764:run$1452 ($dffe) from module data_mem.

22.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.26.16. Rerunning OPT passes. (Maybe there is more to do..)

22.26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividebytwo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

22.26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \dividebytwo.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \pll.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \sub.
  Optimizing cells in module \top.
Performed a total of 0 changes.

22.26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.26.20. Executing OPT_DFF pass (perform DFF optimizations).

22.26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.26.23. Finished OPT passes. (There is nothing left to do.)

22.27. Executing ICE40_WRAPCARRY pass (wrap carries).

22.28. Executing TECHMAP pass (map to technology primitives).

22.28.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

22.28.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

22.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$d6eefa73b09c260984bb3ab238c3c05801fa9e82\_90_pmux for cells of type $pmux.
Using template $paramod$878fd1809419ed11a2d056be26ac30d95fbba358\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$feecc7a0dbd012970970f2858f15e786e251f677\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$e765c459d3029c22a22a27989e94858fd9ebfa9c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$a5f0941832cc861549e29ccafffe20bfdf2e5528\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$a13703aa027da371a1931fc542d213d7de559b19\_90_pmux for cells of type $pmux.
Using template $paramod$a9f023b7f9387cc24984a8fa4722169e6d5f74aa\_90_pmux for cells of type $pmux.
No more expansions possible.
<suppressed ~1928 debug messages>

22.29. Executing OPT pass (performing simple optimizations).

22.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~254 debug messages>
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
<suppressed ~157 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~44 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~175 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
<suppressed ~54 debug messages>
Optimizing module instruction_memory.
<suppressed ~12 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~16 debug messages>
Optimizing module sub.
Optimizing module top.

22.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~270 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~432 debug messages>
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~126 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
<suppressed ~273 debug messages>
Finding identical cells in module `\instruction_memory'.
<suppressed ~18 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 378 cells.

22.29.3. Executing OPT_DFF pass (perform DFF optimizations).

22.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 75 unused cells and 907 unused wires.
<suppressed ~84 debug messages>

22.29.5. Finished fast OPT passes.

22.30. Executing ICE40_OPT pass (performing simple optimizations).

22.30.1. Running ICE40 specific optimizations.

22.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~5 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.30.4. Executing OPT_DFF pass (perform DFF optimizations).

22.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.30.6. Rerunning OPT passes. (Removed registers in this run.)

22.30.7. Running ICE40 specific optimizations.

22.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.30.10. Executing OPT_DFF pass (perform DFF optimizations).

22.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.30.12. Finished OPT passes. (There is nothing left to do.)

22.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

22.32. Executing TECHMAP pass (map to technology primitives).

22.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

22.32.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~760 debug messages>

22.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).

22.35. Executing ICE40_OPT pass (performing simple optimizations).

22.35.1. Running ICE40 specific optimizations.

22.35.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~11 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~33 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~4 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~4 debug messages>
Optimizing module sub.
Optimizing module top.
<suppressed ~1 debug messages>

22.35.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~297 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 99 cells.

22.35.4. Executing OPT_DFF pass (perform DFF optimizations).

22.35.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3189 unused wires.
<suppressed ~10 debug messages>

22.35.6. Rerunning OPT passes. (Removed registers in this run.)

22.35.7. Running ICE40 specific optimizations.

22.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.35.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.35.10. Executing OPT_DFF pass (perform DFF optimizations).

22.35.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.35.12. Finished OPT passes. (There is nothing left to do.)

22.36. Executing ABC pass (technology mapping using ABC).

22.36.1. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 179 wires to a netlist network with 11 inputs and 7 outputs.

22.36.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       26
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:        7
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

22.36.2. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 203 wires to a netlist network with 60 inputs and 4 outputs.

22.36.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       85
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        4
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:       52
ABC RESULTS:              XNOR cells:       35
ABC RESULTS:        internal signals:      139
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:        4
Removing temp directory.

22.36.3. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.4. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1392 gates and 1530 wires to a netlist network with 137 inputs and 65 outputs.

22.36.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      309
ABC RESULTS:            ANDNOT cells:       35
ABC RESULTS:               MUX cells:      214
ABC RESULTS:              NAND cells:      453
ABC RESULTS:               NOR cells:       43
ABC RESULTS:               NOT cells:       32
ABC RESULTS:                OR cells:       65
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       31
ABC RESULTS:        internal signals:     1328
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:       65
Removing temp directory.

22.36.5. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

22.36.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

22.36.6. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 78 wires to a netlist network with 30 inputs and 6 outputs.

22.36.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       27
ABC RESULTS:               MUX cells:        2
ABC RESULTS:              NAND cells:        4
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:        6
Removing temp directory.

22.36.7. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 12 outputs.

22.36.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       12
Removing temp directory.

22.36.8. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

22.36.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

22.36.9. Extracting gate netlist of module `\csr_file' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.10. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 1526 gates and 1630 wires to a netlist network with 103 inputs and 77 outputs.

22.36.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       68
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:               MUX cells:       12
ABC RESULTS:              NAND cells:      189
ABC RESULTS:               NOR cells:       22
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       21
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:        internal signals:     1450
ABC RESULTS:           input signals:      103
ABC RESULTS:          output signals:       77
Removing temp directory.

22.36.11. Extracting gate netlist of module `\dividebytwo' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

22.36.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.11.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

22.36.12. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.13. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.14. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.15. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 260 wires to a netlist network with 29 inputs and 31 outputs.

22.36.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        6
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:       58
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:      200
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

22.36.16. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 276 gates and 443 wires to a netlist network with 167 inputs and 37 outputs.

22.36.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      100
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:              NAND cells:      192
ABC RESULTS:               NOR cells:        4
ABC RESULTS:        internal signals:      239
ABC RESULTS:           input signals:      167
ABC RESULTS:          output signals:       37
Removing temp directory.

22.36.17. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.18. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

22.36.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.18.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

22.36.19. Extracting gate netlist of module `\pll' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.20. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.21. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 216 wires to a netlist network with 118 inputs and 66 outputs.

22.36.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.21.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               MUX cells:       64
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

22.36.22. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 4 outputs.

22.36.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.22.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

22.36.23. Extracting gate netlist of module `\sub' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.36.24. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

22.36.24.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

22.36.24.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

22.37. Executing ICE40_OPT pass (performing simple optimizations).

22.37.1. Running ICE40 specific optimizations.

22.37.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
<suppressed ~90 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~77 debug messages>
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.37.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

22.37.4. Executing OPT_DFF pass (perform DFF optimizations).

22.37.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1732 unused wires.
<suppressed ~15 debug messages>

22.37.6. Rerunning OPT passes. (Removed registers in this run.)

22.37.7. Running ICE40 specific optimizations.

22.37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module dividebytwo.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module pll.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module sub.
Optimizing module top.

22.37.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\dividebytwo'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\sub'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

22.37.10. Executing OPT_DFF pass (perform DFF optimizations).

22.37.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \dividebytwo..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \sub..
Finding unused cells or wires in module \top..

22.37.12. Finished OPT passes. (There is nothing left to do.)

22.38. Executing TECHMAP pass (map to technology primitives).

22.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

22.38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

22.39. Executing ABC pass (technology mapping using ABC).

22.39.1. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 75 gates and 86 wires to a netlist network with 11 inputs and 7 outputs.

22.39.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      19.
ABC: Participating nodes from both networks       =      36.
ABC: Participating nodes from the first network   =      18. (  54.55 % of nodes)
ABC: Participating nodes from the second network  =      18. (  54.55 % of nodes)
ABC: Node pairs (any polarity)                    =      18. (  54.55 % of names can be moved)
ABC: Node pairs (same polarity)                   =      17. (  51.52 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:       68
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

22.39.2. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 188 gates and 248 wires to a netlist network with 60 inputs and 4 outputs.

22.39.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      19.
ABC: Participating nodes from both networks       =      36.
ABC: Participating nodes from the first network   =      18. (  32.73 % of nodes)
ABC: Participating nodes from the second network  =      18. (  32.73 % of nodes)
ABC: Node pairs (any polarity)                    =      18. (  32.73 % of names can be moved)
ABC: Node pairs (same polarity)                   =      10. (  18.18 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       54
ABC RESULTS:        internal signals:      184
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:        4
Removing temp directory.

22.39.3. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.4. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1193 gates and 1330 wires to a netlist network with 137 inputs and 65 outputs.

22.39.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     424.
ABC: Participating nodes from both networks       =     846.
ABC: Participating nodes from the first network   =     423. (  65.89 % of nodes)
ABC: Participating nodes from the second network  =     423. (  65.89 % of nodes)
ABC: Node pairs (any polarity)                    =     423. (  65.89 % of names can be moved)
ABC: Node pairs (same polarity)                   =     171. (  26.64 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      641
ABC RESULTS:        internal signals:     1128
ABC RESULTS:           input signals:      137
ABC RESULTS:          output signals:       65
Removing temp directory.

22.39.5. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

22.39.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.5.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

22.39.6. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 60 gates and 90 wires to a netlist network with 30 inputs and 6 outputs.

22.39.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      22.
ABC: Participating nodes from the first network   =      11. (  50.00 % of nodes)
ABC: Participating nodes from the second network  =      11. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  50.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       8. (  36.36 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.6.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       21
ABC RESULTS:        internal signals:       54
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:        6
Removing temp directory.

22.39.7. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 23 gates and 30 wires to a netlist network with 7 inputs and 12 outputs.

22.39.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      14.
ABC: Participating nodes from both networks       =      26.
ABC: Participating nodes from the first network   =      13. (  92.86 % of nodes)
ABC: Participating nodes from the second network  =      13. (  92.86 % of nodes)
ABC: Node pairs (any polarity)                    =      13. (  92.86 % of names can be moved)
ABC: Node pairs (same polarity)                   =      13. (  92.86 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.7.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       13
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       12
Removing temp directory.

22.39.8. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 10 wires to a netlist network with 6 inputs and 3 outputs.

22.39.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.8.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

22.39.9. Extracting gate netlist of module `\csr_file' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.10. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 351 gates and 454 wires to a netlist network with 103 inputs and 76 outputs.

22.39.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     127.
ABC: Participating nodes from both networks       =     255.
ABC: Participating nodes from the first network   =     126. (  79.75 % of nodes)
ABC: Participating nodes from the second network  =     129. (  81.65 % of nodes)
ABC: Node pairs (any polarity)                    =     126. (  79.75 % of names can be moved)
ABC: Node pairs (same polarity)                   =     100. (  63.29 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.10.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      157
ABC RESULTS:        internal signals:      275
ABC RESULTS:           input signals:      103
ABC RESULTS:          output signals:       76
Removing temp directory.

22.39.11. Extracting gate netlist of module `\dividebytwo' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

22.39.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       2.
ABC: Participating nodes from both networks       =       2.
ABC: Participating nodes from the first network   =       1. (  50.00 % of nodes)
ABC: Participating nodes from the second network  =       1. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =       1. (  50.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       1. (  50.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.11.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

22.39.12. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.13. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.14. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.15. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 81 gates and 110 wires to a netlist network with 29 inputs and 31 outputs.

22.39.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      42.
ABC: Participating nodes from both networks       =      82.
ABC: Participating nodes from the first network   =      41. (  95.35 % of nodes)
ABC: Participating nodes from the second network  =      41. (  95.35 % of nodes)
ABC: Node pairs (any polarity)                    =      41. (  95.35 % of names can be moved)
ABC: Node pairs (same polarity)                   =      37. (  86.05 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.15.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       42
ABC RESULTS:        internal signals:       50
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

22.39.16. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 299 gates and 466 wires to a netlist network with 167 inputs and 37 outputs.

22.39.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      39.
ABC: Participating nodes from both networks       =      76.
ABC: Participating nodes from the first network   =      38. (  36.89 % of nodes)
ABC: Participating nodes from the second network  =      38. (  36.89 % of nodes)
ABC: Node pairs (any polarity)                    =      38. (  36.89 % of names can be moved)
ABC: Node pairs (same polarity)                   =      38. (  36.89 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.16.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      102
ABC RESULTS:        internal signals:      262
ABC RESULTS:           input signals:      167
ABC RESULTS:          output signals:       37
Removing temp directory.

22.39.17. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.18. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

22.39.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.18.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

22.39.19. Extracting gate netlist of module `\pll' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.20. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.21. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 108 gates and 226 wires to a netlist network with 118 inputs and 66 outputs.

22.39.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      67.
ABC: Participating nodes from both networks       =     134.
ABC: Participating nodes from the first network   =      67. (  82.72 % of nodes)
ABC: Participating nodes from the second network  =      67. (  82.72 % of nodes)
ABC: Node pairs (any polarity)                    =      67. (  82.72 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  82.72 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.21.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       80
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

22.39.22. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 4 outputs.

22.39.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       5.
ABC: Participating nodes from both networks       =       8.
ABC: Participating nodes from the first network   =       4. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =       4. (  80.00 % of nodes)
ABC: Node pairs (any polarity)                    =       4. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  80.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.22.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        4
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

22.39.23. Extracting gate netlist of module `\sub' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22.39.24. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

22.39.24.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       2.
ABC: Participating nodes from both networks       =       2.
ABC: Participating nodes from the first network   =       1. (  50.00 % of nodes)
ABC: Participating nodes from the second network  =       1. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =       1. (  50.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       1. (  50.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

22.39.24.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

22.40. Executing ICE40_WRAPCARRY pass (wrap carries).

22.41. Executing TECHMAP pass (map to technology primitives).

22.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

22.41.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 33 unused cells and 3169 unused wires.

22.42. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       32
  2-LUT                6
  3-LUT               10
  4-LUT               16

Eliminating LUTs.
Number of LUTs:       32
  2-LUT                6
  3-LUT               10
  4-LUT               16

Combining LUTs.
Number of LUTs:       32
  2-LUT                6
  3-LUT               10
  4-LUT               16
Discovering LUTs.
Number of LUTs:       54
  2-LUT                4
  3-LUT                9
  4-LUT               41

Eliminating LUTs.
Number of LUTs:       54
  2-LUT                4
  3-LUT                9
  4-LUT               41

Combining LUTs.
Number of LUTs:       54
  2-LUT                4
  3-LUT                9
  4-LUT               41
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:      641
  1-LUT               32
  2-LUT               53
  3-LUT              183
  4-LUT              373

Eliminating LUTs.
Number of LUTs:      641
  1-LUT               32
  2-LUT               53
  3-LUT              183
  4-LUT              373

Combining LUTs.
Number of LUTs:      641
  1-LUT               32
  2-LUT               53
  3-LUT              183
  4-LUT              373
Discovering LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
Discovering LUTs.
Number of LUTs:       53
  2-LUT                5
  3-LUT               35
  4-LUT               13

Eliminating LUTs.
Number of LUTs:       53
  2-LUT                5
  3-LUT               35
  4-LUT               13

Combining LUTs.
Number of LUTs:       53
  2-LUT                5
  3-LUT               35
  4-LUT               13
Discovering LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Eliminating LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5

Combining LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
Discovering LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1

Combining LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:      157
  1-LUT                1
  2-LUT               41
  3-LUT               39
  4-LUT               76

Eliminating LUTs.
Number of LUTs:      157
  1-LUT                1
  2-LUT               41
  3-LUT               39
  4-LUT               76

Combining LUTs.
Number of LUTs:      157
  1-LUT                1
  2-LUT               41
  3-LUT               39
  4-LUT               76
Discovering LUTs.
Number of LUTs:        1
  1-LUT                1

Eliminating LUTs.
Number of LUTs:        1
  1-LUT                1

Combining LUTs.
Number of LUTs:        1
  1-LUT                1
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       42
  2-LUT               10
  3-LUT               22
  4-LUT               10

Eliminating LUTs.
Number of LUTs:       42
  2-LUT               10
  3-LUT               22
  4-LUT               10

Combining LUTs.
Number of LUTs:       42
  2-LUT               10
  3-LUT               22
  4-LUT               10
Discovering LUTs.
Number of LUTs:      102
  3-LUT                5
  4-LUT               97

Eliminating LUTs.
Number of LUTs:      102
  3-LUT                5
  4-LUT               97

Combining LUTs.
Number of LUTs:      102
  3-LUT                5
  4-LUT               97
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:       80
  1-LUT                1
  2-LUT                4
  3-LUT                3
  4-LUT               72

Eliminating LUTs.
Number of LUTs:       80
  1-LUT                1
  2-LUT                4
  3-LUT                3
  4-LUT               72

Combining LUTs.
Number of LUTs:       80
  1-LUT                1
  2-LUT                4
  3-LUT                3
  4-LUT               72
Discovering LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Eliminating LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3

Combining LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminating LUTs.
Number of LUTs:        1
  2-LUT                1

Combining LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~6586 debug messages>

22.43. Executing TECHMAP pass (map to technology primitives).

22.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

22.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$ba05b8a1a425003df083aea0e69541f5cbdc68f2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$df196ed0a1da5c4a58c5e08a1dac304fd3fccaab\$lut for cells of type $lut.
Using template $paramod$aff3a645bb9f572421a4f0f49cf8987ceb4bcdc5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$fb5ee0bdef1c4e74aaf1fd8efae98b46a2f5e564\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod$2f99e7dde0142f5eb4336d05fd90a596d3f2e038\$lut for cells of type $lut.
Using template $paramod$6d23198eb2b8f79a41c7626605a61009695893b1\$lut for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$a3cdc1eb771a2c6a16f64da161e11100ac409d2b\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$70ebb6cf5bc7d63c5c1a98ccefefa2af79e8f2a9\$lut for cells of type $lut.
Using template $paramod$0a94662b0161fc067fc2a1123fd5ac94da2ec1db\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000010 for cells of type $lut.
Using template $paramod$1bf62ab10e48d71d6497bccacf5c70420c470fe9\$lut for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod$2d8ecce5c907513cebcd38ab5efe0fc26fc03464\$lut for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod$a20c6c1e16699890aacd2a27aa974a524fce88da\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01011100 for cells of type $lut.
Using template $paramod$314fe9458b07176c4d2c8c59533027c4c55155b5\$lut for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$c5b694ec89d7629b942ccf6a9be1d39e24f8edec\$lut for cells of type $lut.
Using template $paramod$de3d8c0ac9a85f776878d56395b6e0bf04ae72e7\$lut for cells of type $lut.
Using template $paramod$f63fe32f78d5f3c5de711945c592c8c5ec2303ae\$lut for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod$ab8bb87959c5d7cfa27886cee1355b38e054a61a\$lut for cells of type $lut.
Using template $paramod$d4fae2c0d9ad2966369cd4e39b81c71bcd1327c9\$lut for cells of type $lut.
Using template $paramod$1df41e75d8c1af4127c594b13f60ff058fd64e7e\$lut for cells of type $lut.
Using template $paramod$048d4aa2263b685fba6c6b0d38f6224df0dc3042\$lut for cells of type $lut.
Using template $paramod$2ea69c779d6c1b79ac5a87b0d1523c67d5628dba\$lut for cells of type $lut.
Using template $paramod$acaf438e6f4f31b5725b67e171b88692c75d36a3\$lut for cells of type $lut.
Using template $paramod$ed10455c824c2a3761aabdeb1e31dad905f66e6e\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$8b24407096beec47292ddeb1567a058197a320b9\$lut for cells of type $lut.
Using template $paramod$7e0277340d3f34d16bb7c3938d5c21ff955fcc9d\$lut for cells of type $lut.
Using template $paramod$d53578aacfd93124244778d88be0e90eb09c1b1b\$lut for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$055b455d86a112f8e156f7933b9de48b1f25f2b4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod$ad86cb7e971524b41c3cbfbe7186c4e8b43b7859\$lut for cells of type $lut.
Using template $paramod$b4410865e8124402796f9dfbf73ef8d279fdbd08\$lut for cells of type $lut.
Using template $paramod$38f9bf4dd2329347b8471f0a98443dd323386889\$lut for cells of type $lut.
Using template $paramod$e5e9da8fed769f971686eed8c5eea50e61f73aaa\$lut for cells of type $lut.
Using template $paramod$703a13a751e631ef123f38f7d2125aeabec0f94c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod$f54c0ffd7b041ca43eac7710ab19c0666d826c22\$lut for cells of type $lut.
Using template $paramod$8a5a8b5c9249ecf7f5ca78064405f54302e0a76b\$lut for cells of type $lut.
Using template $paramod$7ee0028c4374eebfc180a68ee762b314b03436b0\$lut for cells of type $lut.
Using template $paramod$1cfadde4781a0fb6b2920d4cd4458637fb668bc5\$lut for cells of type $lut.
Using template $paramod$19ec49f31a8d230a567aa44ce3ea81a03c101e2b\$lut for cells of type $lut.
Using template $paramod$12879138d1e376f344e47ea40be66b776233be75\$lut for cells of type $lut.
Using template $paramod$68752f1e7b9cdc2582ab3d85e496a8b89c78d2d7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod$162eacaa56f6f80a5a27551a5f2071c174364807\$lut for cells of type $lut.
Using template $paramod$94ac66a11090dca84889e55fcf03297912a5b7ec\$lut for cells of type $lut.
Using template $paramod$5a621b016c894274d07edef48c49b401a15fd796\$lut for cells of type $lut.
Using template $paramod$f9b715fbf1040e81e900b2461c2390d17ed5e988\$lut for cells of type $lut.
Using template $paramod$4b2297966ddb718657b80566604f97685ffc0120\$lut for cells of type $lut.
Using template $paramod$45d617c2ce0041e27b541f62b0fc3c3ce441a616\$lut for cells of type $lut.
Using template $paramod$9140e8778d70c73267d16a31702cb8bf43684a0c\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod$1911b0af8a365b2db3000de250cde43a93caa18e\$lut for cells of type $lut.
Using template $paramod$bf60f6ec407ee294958b6566514fc3125ec42258\$lut for cells of type $lut.
Using template $paramod$b297295e19b03521716155b85537bbe86d6a9ae6\$lut for cells of type $lut.
Using template $paramod$b4f85a6321a00b090afc4e21d68e7b99eb94d149\$lut for cells of type $lut.
Using template $paramod$04b674496422df8889c01c3744b94097628ccfbc\$lut for cells of type $lut.
Using template $paramod$71d951b20e73043168c1656217d126e617052faa\$lut for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod$f9ade28f1669c608093cfc771d07571aec15660d\$lut for cells of type $lut.
Using template $paramod$774861bf9b1885d60265e6ddea1c95a32f095489\$lut for cells of type $lut.
Using template $paramod$7a9d9396461df152f697894fa3b294ad1b285e08\$lut for cells of type $lut.
Using template $paramod$d6d3aaeac1b9aa2c4b652c48e0deb565040dda72\$lut for cells of type $lut.
Using template $paramod$baa939b0bd5b3e0c8760492528669bd58f640542\$lut for cells of type $lut.
Using template $paramod$df0b68f8e63b2deb6710e23abd8b8ff0796d4897\$lut for cells of type $lut.
Using template $paramod$243c00f5eb9faa1d5ce3478fdc389a56070781f8\$lut for cells of type $lut.
Using template $paramod$4da2782c2e024b3eded45331a6607870b9d0254f\$lut for cells of type $lut.
Using template $paramod$c1a19a87ccbbb03d43a72335db63f692ddf82cc1\$lut for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod$a670b08a47dd8a34f954c50cd06e9996d77e8467\$lut for cells of type $lut.
Using template $paramod$9d5b68c8da3340b77f1f858b0659185c5f0c4481\$lut for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$10a6437c43700fcd4fd060a0c0ab28814bca14c1\$lut for cells of type $lut.
Using template $paramod$cd6c4b4da6d8737b72fd2dc8f5d83d8967445809\$lut for cells of type $lut.
Using template $paramod$4183384cbf8cf1105604a447ce916f15d3ec7399\$lut for cells of type $lut.
Using template $paramod$bdb7f9ed72fd4f5c7ad81c376f2d8a5c72a0098d\$lut for cells of type $lut.
Using template $paramod$b637cf4714c2e93484bb499728e176a6ab69c910\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$cd05f04889088c47a0a5abae8c2d644fd314805e\$lut for cells of type $lut.
Using template $paramod$64669a7e87c28e39425dffff48145545533b4971\$lut for cells of type $lut.
Using template $paramod$fceb3a526de44b8f6b38e567360f59f7cf5878fb\$lut for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod$0c61e9976cdd1871e3b2976ee818289ebf7eafcc\$lut for cells of type $lut.
Using template $paramod$59c595af41d4a5cce2d588c3a5f1342749ce7a77\$lut for cells of type $lut.
Using template $paramod$1defcde2651b9293b25dc8313a52210a02d52398\$lut for cells of type $lut.
Using template $paramod$8ec29827d94e80e773a6f636dfcf3e1591527264\$lut for cells of type $lut.
Using template $paramod$1843b3c15f2447d117e2d5de9b00f791ef5f9fa3\$lut for cells of type $lut.
Using template $paramod$bb4fff1cc3b827238aa40993cafede1c5beecbe3\$lut for cells of type $lut.
Using template $paramod$4789582d00084c3344b7a6dacf516efd46244876\$lut for cells of type $lut.
Using template $paramod$a9334a4926470ce1833f9252e5e465c7b1118e6b\$lut for cells of type $lut.
Using template $paramod$fd1e68d43235621014e35437b4508a97628b7e8f\$lut for cells of type $lut.
Using template $paramod$ceeb45bdd6c300a6df87f1c45b8348109858185a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111111 for cells of type $lut.
Using template $paramod$f372bf1b294e01fd043eb05a6280cd9dfb6e2e04\$lut for cells of type $lut.
Using template $paramod$05f19d9c2311a3d1ab38ece311a1bb9f96c62043\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~3184 debug messages>
Removed 0 unused cells and 2854 unused wires.

22.44. Executing AUTONAME pass.
Renamed 147 objects in module ALUControl (11 iterations).
Renamed 412 objects in module ForwardingUnit (14 iterations).
Renamed 26395 objects in module alu (71 iterations).
Renamed 3 objects in module branch_decision (2 iterations).
Renamed 564 objects in module branch_predictor (12 iterations).
Renamed 16 objects in module control (4 iterations).
Renamed 3 objects in module cpu (2 iterations).
Renamed 8 objects in module csr_file (2 iterations).
Renamed 1177 objects in module data_mem (22 iterations).
Renamed 4 objects in module dividebytwo (3 iterations).
Renamed 155 objects in module ex_mem (2 iterations).
Renamed 178 objects in module id_ex (2 iterations).
Renamed 64 objects in module if_id (2 iterations).
Renamed 113 objects in module imm_gen (12 iterations).
Renamed 303 objects in module instruction_memory (9 iterations).
Renamed 117 objects in module mem_wb (2 iterations).
Renamed 32 objects in module mux2to1 (2 iterations).
Renamed 32 objects in module program_counter (2 iterations).
Renamed 223 objects in module regfile (9 iterations).
Renamed 4 objects in module sign_mask_gen (2 iterations).
Renamed 1 objects in module top (2 iterations).
<suppressed ~2520 debug messages>

22.45. Executing HIERARCHY pass (managing design hierarchy).

22.45.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \dividebytwo
Used module:     \instruction_memory
Used module:     \pll
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:             \sub
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

22.45.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \dividebytwo
Used module:     \instruction_memory
Used module:     \pll
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:             \sub
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

22.46. Printing statistics.

=== ALUControl ===

   Number of wires:                 17
   Number of wire bits:             67
   Number of public wires:          17
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== ForwardingUnit ===

   Number of wires:                 37
   Number of wire bits:            143
   Number of public wires:          37
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 54
     SB_LUT4                        54

=== adder ===

   Number of wires:                  3
   Number of wire bits:             96
   Number of public wires:           3
   Number of public wire bits:      96
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== alu ===

   Number of wires:                280
   Number of wire bits:           1305
   Number of public wires:         280
   Number of public wire bits:    1305
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                675
     SB_CARRY                       32
     SB_LUT4                       641
     adder                           1
     sub                             1

=== branch_decision ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     SB_LUT4                         3

=== branch_predictor ===

   Number of wires:                 26
   Number of wire bits:            205
   Number of public wires:          26
   Number of public wire bits:     205
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                120
     SB_CARRY                       31
     SB_DFFE                        35
     SB_DFFN                         1
     SB_LUT4                        53

=== control ===

   Number of wires:                 14
   Number of wire bits:             21
   Number of public wires:          14
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     SB_LUT4                        13

=== cpu ===

   Number of wires:                 72
   Number of wire bits:           1772
   Number of public wires:          72
   Number of public wire bits:    1772
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     ALUControl                      1
     ForwardingUnit                  1
     SB_LUT4                         3
     adder                           2
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     csr_file                        1
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        24
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== csr_file ===

   Number of wires:                 14
   Number of wire bits:            218
   Number of public wires:          14
   Number of public wire bits:     218
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_RAM40_4K                     8

=== data_mem ===

   Number of wires:                138
   Number of wire bits:            825
   Number of public wires:         138
   Number of public wire bits:     825
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                268
     SB_DFFE                       103
     SB_LUT4                       157
     SB_RAM40_4K                     8

=== dividebytwo ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     SB_DFF                          1
     SB_LUT4                         1

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     SB_DFF                        155

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_DFF                        178

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_DFF                         64

=== imm_gen ===

   Number of wires:                 10
   Number of wire bits:             89
   Number of public wires:          10
   Number of public wire bits:      89
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     SB_LUT4                        42

=== instruction_memory ===

   Number of wires:                 45
   Number of wire bits:            362
   Number of public wires:          45
   Number of public wire bits:     362
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     SB_DFF                          4
     SB_LUT4                       102
     SB_RAM40_4K                    10

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     SB_DFF                        117

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== pll ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_PLL40_CORE                   1

=== program_counter ===

   Number of wires:                  3
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_DFF                         32

=== regfile ===

   Number of wires:                 24
   Number of wire bits:            253
   Number of public wires:          24
   Number of public wire bits:     253
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     SB_DFF                         48
     SB_LUT4                        80
     SB_RAM40_4K                     4

=== sign_mask_gen ===

   Number of wires:                  3
   Number of wire bits:             10
   Number of public wires:           3
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== sub ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_MAC16                        1

=== top ===

   Number of wires:                 14
   Number of wire bits:            172
   Number of public wires:          14
   Number of public wire bits:     172
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     SB_HFOSC                        1
     SB_LUT4                         1
     cpu                             1
     data_mem                        1
     dividebytwo                     1
     instruction_memory              1
     pll                             1

=== design hierarchy ===

   top                               1
     cpu                             1
       ALUControl                    1
       ForwardingUnit                1
       adder                         2
       alu                           1
         adder                       1
         sub                         1
       branch_decision               1
       branch_predictor              1
       control                       1
       csr_file                      1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      24
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     dividebytwo                     1
     instruction_memory              1
     pll                             1

   Number of wires:                831
   Number of wire bits:           9265
   Number of public wires:         831
   Number of public wire bits:    9265
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2791
     SB_CARRY                       63
     SB_DFF                        599
     SB_DFFE                       138
     SB_DFFN                         1
     SB_HFOSC                        1
     SB_LUT4                      1954
     SB_MAC16                        4
     SB_PLL40_CORE                   1
     SB_RAM40_4K                    30

22.47. Executing CHECK pass (checking for obvious problems).
Checking module ALUControl...
Checking module ForwardingUnit...
Checking module adder...
Checking module alu...
Checking module branch_decision...
Checking module branch_predictor...
Checking module control...
Checking module cpu...
Checking module csr_file...
Checking module data_mem...
Checking module dividebytwo...
Checking module ex_mem...
Checking module id_ex...
Checking module if_id...
Checking module imm_gen...
Checking module instruction_memory...
Checking module mem_wb...
Checking module mux2to1...
Checking module pll...
Checking module program_counter...
Checking module regfile...
Checking module sign_mask_gen...
Checking module sub...
Checking module top...
Found and reported 0 problems.

22.48. Executing BLIF backend.

23. Executing JSON backend.

Warnings: 34 unique messages, 34 total
End of script. Logfile hash: 2982a5c003, CPU: user 4.31s system 0.10s, MEM: 127.09 MB peak
Yosys 0.9+4052 (git sha1 44520808, clang  -fPIC -Os)
Time spent: 47% 2x abc (3 sec), 11% 28x opt_expr (0 sec), ...
