$date
	Wed Jun  2 22:16:15 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module adder $end
$var wire 32 ! input1 [31:0] $end
$var wire 32 " input2 [31:0] $end
$var wire 32 # out [31:0] $end
$var wire 32 $ dsp_o [31:0] $end
$var wire 1 % dsp_co $end
$var reg 16 & dsp_a [15:0] $end
$var reg 1 ' dsp_addsubbot $end
$var reg 1 ( dsp_addsubtop $end
$var reg 1 ) dsp_ahold $end
$var reg 16 * dsp_b [15:0] $end
$var reg 1 + dsp_bhold $end
$var reg 16 , dsp_c [15:0] $end
$var reg 1 - dsp_ce $end
$var reg 1 . dsp_chold $end
$var reg 1 / dsp_ci $end
$var reg 16 0 dsp_d [15:0] $end
$var reg 1 1 dsp_dhold $end
$var reg 1 2 dsp_irstbot $end
$var reg 1 3 dsp_irsttop $end
$var reg 1 4 dsp_oholdbot $end
$var reg 1 5 dsp_oholdtop $end
$var reg 1 6 dsp_oloadbot $end
$var reg 1 7 dsp_oloadtop $end
$var reg 1 8 dsp_orstbot $end
$var reg 1 9 dsp_orsttop $end
$scope module SB_MAC16_adder $end
$var wire 16 : A [15:0] $end
$var wire 1 ; ACCUMCI $end
$var wire 1 ' ADDSUBBOT $end
$var wire 1 ( ADDSUBTOP $end
$var wire 1 ) AHOLD $end
$var wire 16 < B [15:0] $end
$var wire 1 + BHOLD $end
$var wire 16 = C [15:0] $end
$var wire 1 - CE $end
$var wire 1 . CHOLD $end
$var wire 1 / CI $end
$var wire 1 > CLK $end
$var wire 1 % CO $end
$var wire 16 ? D [15:0] $end
$var wire 1 1 DHOLD $end
$var wire 1 @ HCI $end
$var wire 1 2 IRSTBOT $end
$var wire 1 3 IRSTTOP $end
$var wire 1 A LCI $end
$var wire 1 4 OHOLDBOT $end
$var wire 1 5 OHOLDTOP $end
$var wire 1 6 OLOADBOT $end
$var wire 1 7 OLOADTOP $end
$var wire 1 8 ORSTBOT $end
$var wire 1 9 ORSTTOP $end
$var wire 16 B Oh [15:0] $end
$var wire 16 C Ol [15:0] $end
$var wire 1 D SIGNEXTIN $end
$var wire 1 E clock $end
$var wire 16 F iA [15:0] $end
$var wire 16 G iB [15:0] $end
$var wire 16 H iC [15:0] $end
$var wire 16 I iD [15:0] $end
$var wire 16 J iF [15:0] $end
$var wire 16 K iG [15:0] $end
$var wire 32 L iH [31:0] $end
$var wire 16 M iJ [15:0] $end
$var wire 16 N iK [15:0] $end
$var wire 16 O iQ [15:0] $end
$var wire 16 P iS [15:0] $end
$var wire 16 Q iW [15:0] $end
$var wire 16 R iX [15:0] $end
$var wire 16 S iY [15:0] $end
$var wire 16 T iZ [15:0] $end
$var wire 16 U p_Al_Bl [15:0] $end
$var wire 16 V p_Al_Bh [15:0] $end
$var wire 16 W p_Ah_Bl [15:0] $end
$var wire 16 X p_Ah_Bh [15:0] $end
$var wire 16 Y iR [15:0] $end
$var wire 16 Z iP [15:0] $end
$var wire 32 [ iL [31:0] $end
$var wire 24 \ iK_e [23:0] $end
$var wire 24 ] iJ_e [23:0] $end
$var wire 16 ^ YZ [15:0] $end
$var wire 16 _ XW [15:0] $end
$var wire 1 ` SIGNEXTOUT $end
$var wire 32 a O [31:0] $end
$var wire 1 b LCO $end
$var wire 16 c Bl [15:0] $end
$var wire 16 d Bh [15:0] $end
$var wire 16 e Al [15:0] $end
$var wire 16 f Ah [15:0] $end
$var wire 1 g ACCUMCO $end
$var reg 16 h rA [15:0] $end
$var reg 16 i rB [15:0] $end
$var reg 16 j rC [15:0] $end
$var reg 16 k rD [15:0] $end
$var reg 16 l rF [15:0] $end
$var reg 16 m rG [15:0] $end
$var reg 32 n rH [31:0] $end
$var reg 16 o rJ [15:0] $end
$var reg 16 p rK [15:0] $end
$var reg 16 q rQ [15:0] $end
$var reg 16 r rS [15:0] $end
$upscope $end
$upscope $end
$scope module sub $end
$var wire 1 s co $end
$var wire 32 t input1 [31:0] $end
$var wire 32 u input2 [31:0] $end
$var wire 32 v out [31:0] $end
$var wire 32 w dsp_o [31:0] $end
$var wire 1 x dsp_co $end
$var reg 16 y dsp_a [15:0] $end
$var reg 1 z dsp_addsubbot $end
$var reg 1 { dsp_addsubtop $end
$var reg 1 | dsp_ahold $end
$var reg 16 } dsp_b [15:0] $end
$var reg 1 ~ dsp_bhold $end
$var reg 16 !" dsp_c [15:0] $end
$var reg 1 "" dsp_ce $end
$var reg 1 #" dsp_chold $end
$var reg 1 $" dsp_ci $end
$var reg 16 %" dsp_d [15:0] $end
$var reg 1 &" dsp_dhold $end
$var reg 1 '" dsp_irstbot $end
$var reg 1 (" dsp_irsttop $end
$var reg 1 )" dsp_oholdbot $end
$var reg 1 *" dsp_oholdtop $end
$var reg 1 +" dsp_oloadbot $end
$var reg 1 ," dsp_oloadtop $end
$var reg 1 -" dsp_orstbot $end
$var reg 1 ." dsp_orsttop $end
$scope module SB_MAC16_adder $end
$var wire 16 /" A [15:0] $end
$var wire 1 0" ACCUMCI $end
$var wire 1 z ADDSUBBOT $end
$var wire 1 { ADDSUBTOP $end
$var wire 1 | AHOLD $end
$var wire 16 1" B [15:0] $end
$var wire 1 ~ BHOLD $end
$var wire 16 2" C [15:0] $end
$var wire 1 "" CE $end
$var wire 1 #" CHOLD $end
$var wire 1 $" CI $end
$var wire 1 3" CLK $end
$var wire 1 x CO $end
$var wire 16 4" D [15:0] $end
$var wire 1 &" DHOLD $end
$var wire 1 5" HCI $end
$var wire 1 '" IRSTBOT $end
$var wire 1 (" IRSTTOP $end
$var wire 1 6" LCI $end
$var wire 1 )" OHOLDBOT $end
$var wire 1 *" OHOLDTOP $end
$var wire 1 +" OLOADBOT $end
$var wire 1 ," OLOADTOP $end
$var wire 1 -" ORSTBOT $end
$var wire 1 ." ORSTTOP $end
$var wire 16 7" Oh [15:0] $end
$var wire 16 8" Ol [15:0] $end
$var wire 1 9" SIGNEXTIN $end
$var wire 1 :" clock $end
$var wire 16 ;" iA [15:0] $end
$var wire 16 <" iB [15:0] $end
$var wire 16 =" iC [15:0] $end
$var wire 16 >" iD [15:0] $end
$var wire 16 ?" iF [15:0] $end
$var wire 16 @" iG [15:0] $end
$var wire 32 A" iH [31:0] $end
$var wire 16 B" iJ [15:0] $end
$var wire 16 C" iK [15:0] $end
$var wire 16 D" iQ [15:0] $end
$var wire 16 E" iS [15:0] $end
$var wire 16 F" iW [15:0] $end
$var wire 16 G" iX [15:0] $end
$var wire 16 H" iY [15:0] $end
$var wire 16 I" iZ [15:0] $end
$var wire 16 J" p_Al_Bl [15:0] $end
$var wire 16 K" p_Al_Bh [15:0] $end
$var wire 16 L" p_Ah_Bl [15:0] $end
$var wire 16 M" p_Ah_Bh [15:0] $end
$var wire 16 N" iR [15:0] $end
$var wire 16 O" iP [15:0] $end
$var wire 32 P" iL [31:0] $end
$var wire 24 Q" iK_e [23:0] $end
$var wire 24 R" iJ_e [23:0] $end
$var wire 16 S" YZ [15:0] $end
$var wire 16 T" XW [15:0] $end
$var wire 1 U" SIGNEXTOUT $end
$var wire 32 V" O [31:0] $end
$var wire 1 W" LCO $end
$var wire 16 X" Bl [15:0] $end
$var wire 16 Y" Bh [15:0] $end
$var wire 16 Z" Al [15:0] $end
$var wire 16 [" Ah [15:0] $end
$var wire 1 \" ACCUMCO $end
$var reg 16 ]" rA [15:0] $end
$var reg 16 ^" rB [15:0] $end
$var reg 16 _" rC [15:0] $end
$var reg 16 `" rD [15:0] $end
$var reg 16 a" rF [15:0] $end
$var reg 16 b" rG [15:0] $end
$var reg 32 c" rH [31:0] $end
$var reg 16 d" rJ [15:0] $end
$var reg 16 e" rK [15:0] $end
$var reg 16 f" rQ [15:0] $end
$var reg 16 g" rS [15:0] $end
$upscope $end
$upscope $end
$scope module top $end
$var wire 1 h" Branch_Enable $end
$var wire 7 i" AluCtl_wire [6:0] $end
$var wire 32 j" ALUOut [31:0] $end
$var reg 32 k" A [31:0] $end
$var reg 32 l" B [31:0] $end
$var reg 4 m" FuncCode [3:0] $end
$var reg 7 n" Opcode [6:0] $end
$var reg 1 o" clk $end
$scope module aluCtrl_inst $end
$var wire 4 p" FuncCode [3:0] $end
$var wire 7 q" Opcode [6:0] $end
$var reg 7 r" ALUCtl [6:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 32 s" A [31:0] $end
$var wire 7 t" ALUctl [6:0] $end
$var wire 32 u" B [31:0] $end
$var reg 32 v" ALUOut [31:0] $end
$var reg 1 h" Branch_Enable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 v"
b0 u"
b1000 t"
b0 s"
b1000 r"
b110011 q"
b100 p"
0o"
b110011 n"
b100 m"
b0 l"
b0 k"
b0 j"
b1000 i"
0h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
x\"
bz ["
bz Z"
bz Y"
bz X"
xW"
bx V"
zU"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bz I"
bz H"
bz G"
bz F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bz >"
bz ="
bz <"
bz ;"
x:"
z9"
bx 8"
bx 7"
06"
x5"
bz 4"
z3"
bz 2"
bz 1"
z0"
bz /"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
bz %"
0$"
0#"
1""
bz !"
0~
bz }
0|
1{
1z
bz y
xx
bx w
bx v
bz u
bz t
xs
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
xg
b0zzzzzzzz f
b0zzzzzzzz e
b0zzzzzzzz d
b0zzzzzzzz c
xb
bx a
z`
bx _
bx ^
b0xxxxxxxxxxxxxxxx ]
b0xxxxxxxxxxxxxxxx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bz T
bz S
bz R
bz Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bz I
bz H
bz G
bz F
xE
zD
bx C
bx B
0A
x@
bz ?
z>
bz =
bz <
z;
bz :
09
08
07
06
05
04
03
02
01
bz 0
0/
0.
1-
bz ,
0+
bz *
0)
0(
0'
bz &
x%
bx $
bx #
bz "
bz !
$end
#1
1o"
#2
0o"
#3
1o"
#4
0o"
#5
b11110011 j"
b11110011 v"
1o"
b10101001 l"
b10101001 u"
b1011010 k"
b1011010 s"
#6
0o"
#7
1o"
#8
0o"
#9
1o"
#10
b111 i"
b111 r"
b111 t"
b0 j"
b0 v"
0o"
b10 m"
b10 p"
b1000001000000110000010100000111 l"
b1000001000000110000010100000111 u"
b1100000101000001011000011001000 k"
b1100000101000001011000011001000 s"
#11
1o"
#12
0o"
#13
1o"
#14
0o"
#15
b1 j"
b1 v"
1o"
b1000111000000110000110100000101 l"
b1000111000000110000110100000101 u"
b1000001000000110000010100000111 k"
b1000001000000110000010100000111 s"
#16
0o"
#17
1o"
#18
0o"
#19
1o"
#20
b0 j"
b0 v"
0o"
b1100000101000001011000011001000 l"
b1100000101000001011000011001000 u"
b1100000101000001011000011001000 k"
b1100000101000001011000011001000 s"
#21
1o"
#22
0o"
#23
1o"
#24
0o"
#25
1o"
b10011110101000011100110100000000 l"
b10011110101000011100110100000000 u"
b10100010001101000101011001111000 k"
b10100010001101000101011001111000 s"
#26
0o"
#27
1o"
#28
0o"
#29
1o"
#30
b1 j"
b1 v"
0o"
b11010001101000101011001111000100 l"
b11010001101000101011001111000100 u"
b10000111011001011110110111000001 k"
b10000111011001011110110111000001 s"
#31
1o"
#32
0o"
#33
1o"
#34
0o"
#35
b0 j"
b0 v"
1o"
b11110000000000000000000000000000 l"
b11110000000000000000000000000000 u"
b100000000000000000000000000000 k"
b100000000000000000000000000000 s"
#36
0o"
#37
1o"
#38
0o"
#39
1o"
#40
0o"
b10100000000000000000000000000000 l"
b10100000000000000000000000000000 u"
b1100000000000000000000000000000 k"
b1100000000000000000000000000000 s"
#41
1o"
#42
0o"
#43
1o"
#44
0o"
#45
b1 j"
b1 v"
1o"
b100000000000000000000000000000 l"
b100000000000000000000000000000 u"
b11110000000000000000000000000000 k"
b11110000000000000000000000000000 s"
#46
0o"
#47
1o"
#48
0o"
#49
1o"
#50
0o"
b1100000000000000000000000000000 l"
b1100000000000000000000000000000 u"
b10100000000000000000000000000000 k"
b10100000000000000000000000000000 s"
#51
1o"
#52
0o"
#53
1o"
#54
0o"
#55
1o"
